#include<stdio.h>
#include<stdlib.h>
int numprocess,numblock;
void display(int p,int process[],int block[],int allocation[])
{
        for(int i=0;i<p;i++)
        {
                if(allocation[i]==-1)
                        printf("process %d unallocated\n",i+1);
                else
                        printf("process  %d allocated to block %d\n",(i+1),(allocation[i]+1));
        }
        printf("The internal fragmentation is as follows\n");
        for(int i=0;i<p;i++)
        {
                printf("%d",block[allocation[i]]);
                printf("\n");
        }
}


void firstfit(int process[],int p,int block[],int b)
{
        int i,j;
        int allocation[p];
        for(i=0;i<p;i++)
                allocation[i]=-1;
        int trackofblock[b];
        for(j=0;j<b;j++)
                trackofblock[i]=-1;
        for(i=0;i<p;i++)
        {
                for(j=0;j<b;j++)
                {
                        if(process[i]<=block[j]&&trackofblock[j]==-1)
                        {
                                allocation[i]=j;
                                trackofblock[j]=1;
                                break;
                        }
                }
        }
        display(p,process,block,allocation);
}
void worstfit(int process[],int p,int block[],int b)
{
        int i,j;
         int allocation[p];
        for(i=0;i<p;i++)
                allocation[i]=-1;
        int trackofblock[b];
        for(i=0;i<b;i++)
                trackofblock[i]=-1;

        for(i=0;i<p;i++)
         {
                int worstindex=-1;
                for(j=0;j<b;j++)
                {
                        if(process[i]<=block[j]&&(worstindex==-1||block[worstindex]<block[j]))
                        {
                                if(trackofblock[j]==-1)
                                        worstindex=j;
                        }

                       }
                if(worstindex!=-1)
                {
                        allocation[i]=worstindex;
                        block[worstindex]-=process[i];
                        trackofblock[worstindex]=1;
                }
        }
        display(p,process,block,allocation);
}
void bestfit(int process[], int p, int block[], int b) {
    int allocation[p];
    int trackofblock[b]; // Array to track whether a block is used for allocation
    for (int i = 0; i < p; i++)
        allocation[i] = -1;
    for (int k = 0; k < b; k++)
        trackofblock[k] = -1; // Initialize trackofblock array

    for (int i = 0; i < p; i++) {
        int bestindex = -1;
        for (int j = 0; j < b; j++) {
            if (block[j] >= process[i] && (bestindex == -1 || block[bestindex] > block[j])) {
                if (trackofblock[j] == -1) {
                    bestindex = j;
                }
            }
        }
        if (bestindex != -1) {
            allocation[i] = bestindex;
            block[bestindex] -= process[i];
            trackofblock[bestindex] = 1; // Mark the block as used
        }
    }
    display(p, process, block, allocation);
}



int main()
{
        int i,j;
        printf("Enter the number of processes");
        scanf("%d",&numprocess);
        printf("Enter the number of blocks");
        scanf("%d",&numblock);
        int *process=(int *)malloc(sizeof(int)*numprocess);
        int *block=(int *)malloc(sizeof(int)*numblock);
        printf("Enter the size of processes\n");
        for(i=0;i<numprocess;i++)
        {
                printf("process %d ->\n",(i+1));
                scanf("%d",&process[i]);
        }
        printf("Enter the size of blocks\n");
        for(i=0;i<numblock;i++)
        {
                printf("block %d->\n",(i+1));
                scanf("%d",&block[i]);
        }
        int choice;
        printf("Enter 1 for first fit,2 for best fit and 3 for worst fit");
        scanf("%d",&choice);
        switch(choice)
        {
case 1:

        firstfit(process,numprocess,block,numblock);
        break;
case 2:
        bestfit(process,numprocess,block,numblock);
        break;
case 3:
        worstfit(process,numprocess,block,numblock);
        break;
default:
        printf("Invalid");
        break;

}
free(process);
free(block);
return 1;
}
