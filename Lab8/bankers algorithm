#include <stdio.h>
#include <stdlib.h>

void safesequence(int p, int r, int available[], int allocated[][r], int maximum_need[][r]) {
    int need[p][r];
    int availablenow[r];
    int i, j;
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            need[i][j] = maximum_need[i][j] - allocated[i][j];
        }
    }

    for (i = 0; i < r; i++) {
        availablenow[i] = available[i];
    }

    int done = 0;
    int found = 0;
    int canprocess;
    int finish[p];
    int safesequence[p];

    for (i = 0; i < p; i++) {
        finish[i] = 0;
    }

    while (done < p) {
        found = 0;
        for (i = 0; i < p; i++) {
            if (finish[i] == 0) {
                canprocess = 1;
                for (j = 0; j < r; j++) {
                    if (need[i][j] > availablenow[j]) {
                        canprocess = 0;
                        break;
                    }
                }
                if (canprocess) {
                    for (j = 0; j < r; j++) {
                        availablenow[j] += allocated[i][j];
                    }
                    finish[i] = 1;
                    safesequence[done++] = i + 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("Not in a safe sequence\n");
            break;
        }
    }
    if (found) {
        printf("The safe sequence is: ");
        for (i = 0; i < p; i++) {
            printf("%d ", safesequence[i]);
        }
        printf("\n");
    }
    }
void requestresource(int p,int r,int available[],int allocated[][r],int maximum_need[][r],int req)
{
        int i;
        int request[r];
        printf("Enter the request made by process %d\n",req);
        for(i=0;i<r;i++)
        {
                scanf("%d",&request[i]);
        }

        for(i=0;i<r;i++)
        {
                if(request[i]>available[i])
                {printf("request exceeded the current availibility");
                        return;
                }
        }
        for(i=0;i<r;i++)
        {
                if(request[i]>maximum_need[req][i]-allocated[req][i])
                {
                        printf("Must wait due to exceeding maximum claim");
                        return;
                }
        }
        for(i=0;i<r;i++)
        {
                available[i]-=request[i];
                allocated[req][i]+=request[i];
        }
        safesequence(p,r,available,allocated,maximum_need);
        for(i=0;i<r;i++)
        {
                available[i]+=request[i];
                allocated[req][i]-=request[i];
        }


}


int main() {
    int i, j;
    int p, r;

    printf("Enter the number of processes: ");
    scanf("%d", &p);
    printf("Enter the number of resources: ");
    scanf("%d", &r);

    int maximum_need[p][r];
    int available[r];
    int allocated[p][r];

    printf("Enter the maximum resources needed by each process:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            printf("Process %d, Resource %d: ", i + 1, j + 1);
            scanf("%d", &maximum_need[i][j]);
        }
    }

    printf("Enter the resources already allocated to each process:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            printf("Process %d, Resource %d: ", i + 1, j + 1);
            scanf("%d", &allocated[i][j]);
        }
    }

    printf("Enter the available resources:\n");
    for (i = 0; i < r; i++) {
        printf("Resource %d: ", i + 1);
        scanf("%d", &available[i]);
    }

    safesequence(p, r, available, allocated, maximum_need);
    printf("Enter the resource making request");
    int req;
    scanf("%d",&req);
    requestresource(p,r,available,allocated,maximum_need,req);

    return 0;
}
                           
